// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated with protocol_gen.go -- do not edit this file.
//   go run scripts/protocol_gen/protocol_gen.go
//
// DAP version 1.65.0

#include "dap/protocol.h"

namespace dap {

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Checksum,
      "",
      DAP_FIELD(algorithm, "algorithm"),
      DAP_FIELD(checksum, "checksum"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Source,
      "",
      DAP_FIELD(adapterData, "adapterData"),
      DAP_FIELD(checksums, "checksums"),
      DAP_FIELD(name, "name"),
      DAP_FIELD(origin, "origin"),
      DAP_FIELD(path, "path"),
      DAP_FIELD(presentationHint, "presentationHint"),
      DAP_FIELD(sourceReference, "sourceReference"),
      DAP_FIELD(sources, "sources"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ColumnDescriptor,
      "",
      DAP_FIELD(attributeName, "attributeName"),
      DAP_FIELD(format, "format"),
      DAP_FIELD(label, "label"),
      DAP_FIELD(type, "type"),
      DAP_FIELD(width, "width"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ExceptionBreakpointsFilter,
      "",
      DAP_FIELD(conditionDescription,
         "conditionDescription"),
      DAP_FIELD(def, "default"),
      DAP_FIELD(description, "description"),
      DAP_FIELD(filter, "filter"),
      DAP_FIELD(label, "label"),
      DAP_FIELD(supportsCondition,
         "supportsCondition"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(BreakpointMode,
      "",
      DAP_FIELD(appliesTo, "appliesTo"),
      DAP_FIELD(description, "description"),
      DAP_FIELD(label, "label"),
      DAP_FIELD(mode, "mode"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Thread,
      "",
      DAP_FIELD(id, "id"),
      DAP_FIELD(name, "name"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ValueFormat, "", DAP_FIELD(hex, "hex"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(StackFrame,
      "",
      DAP_FIELD(canRestart, "canRestart"),
      DAP_FIELD(column, "column"),
      DAP_FIELD(endColumn, "endColumn"),
      DAP_FIELD(endLine, "endLine"),
      DAP_FIELD(id, "id"),
      DAP_FIELD(instructionPointerReference,
         "instructionPointerReference"),
      DAP_FIELD(line, "line"),
      DAP_FIELD(moduleId, "moduleId"),
      DAP_FIELD(name, "name"),
      DAP_FIELD(presentationHint, "presentationHint"),
      DAP_FIELD(source, "source"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(StackFrameFormat,
      "",
      DAP_FIELD(includeAll, "includeAll"),
      DAP_FIELD(line, "line"),
      DAP_FIELD(module, "module"),
      DAP_FIELD(parameterNames, "parameterNames"),
      DAP_FIELD(parameterTypes, "parameterTypes"),
      DAP_FIELD(parameterValues, "parameterValues"),
      DAP_FIELD(parameters, "parameters"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Scope,
      "",
      DAP_FIELD(column, "column"),
      DAP_FIELD(endColumn, "endColumn"),
      DAP_FIELD(endLine, "endLine"),
      DAP_FIELD(expensive, "expensive"),
      DAP_FIELD(indexedVariables, "indexedVariables"),
      DAP_FIELD(line, "line"),
      DAP_FIELD(name, "name"),
      DAP_FIELD(namedVariables, "namedVariables"),
      DAP_FIELD(presentationHint, "presentationHint"),
      DAP_FIELD(source, "source"),
      DAP_FIELD(variablesReference,
         "variablesReference"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Variable,
      "",
      DAP_FIELD(evaluateName, "evaluateName"),
      DAP_FIELD(indexedVariables, "indexedVariables"),
      DAP_FIELD(memoryReference, "memoryReference"),
      DAP_FIELD(name, "name"),
      DAP_FIELD(namedVariables, "namedVariables"),
      DAP_FIELD(presentationHint, "presentationHint"),
      DAP_FIELD(type, "type"),
      DAP_FIELD(value, "value"),
      DAP_FIELD(variablesReference,
         "variablesReference"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(VariablePresentationHint,
      "",
      DAP_FIELD(attributes, "attributes"),
      DAP_FIELD(kind, "kind"),
      DAP_FIELD(lazy, "lazy"),
      DAP_FIELD(visibility, "visibility"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(Breakpoint,
      "",
      DAP_FIELD(column, "column"),
      DAP_FIELD(endColumn, "endColumn"),
      DAP_FIELD(endLine, "endLine"),
      DAP_FIELD(id, "id"),
      DAP_FIELD(instructionReference,
         "instructionReference"),
      DAP_FIELD(line, "line"),
      DAP_FIELD(message, "message"),
      DAP_FIELD(offset, "offset"),
      DAP_FIELD(reason, "reason"),
      DAP_FIELD(source, "source"),
      DAP_FIELD(verified, "verified"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(SourceBreakpoint,
      "",
      DAP_FIELD(column, "column"),
      DAP_FIELD(condition, "condition"),
      DAP_FIELD(hitCondition, "hitCondition"),
      DAP_FIELD(line, "line"),
      DAP_FIELD(logMessage, "logMessage"),
      DAP_FIELD(mode, "mode"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ExceptionOptions,
      "",
      DAP_FIELD(breakMode, "breakMode"),
      DAP_FIELD(path, "path"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ExceptionPathSegment,
      "",
      DAP_FIELD(names, "names"),
      DAP_FIELD(negate, "negate"));

   DAP_IMPLEMENT_STRUCT_TYPEINFO(ExceptionFilterOptions,
      "",
      DAP_FIELD(condition, "condition"),
      DAP_FIELD(filterId, "filterId"),
      DAP_FIELD(mode, "mode"));

}  // namespace dap
