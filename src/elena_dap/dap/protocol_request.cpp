// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated with protocol_gen.go -- do not edit this file.
//   go run scripts/protocol_gen/protocol_gen.go
//
// DAP version 1.65.0

#include "dap/protocol.h"

namespace dap 
{

DAP_IMPLEMENT_STRUCT_TYPEINFO(
   InitializeRequest,
   "initialize",
   DAP_FIELD(adapterID, "adapterID"),
   DAP_FIELD(clientID, "clientID"),
   DAP_FIELD(clientName, "clientName"),
   DAP_FIELD(columnsStartAt1, "columnsStartAt1"),
   DAP_FIELD(linesStartAt1, "linesStartAt1"),
   DAP_FIELD(locale, "locale"),
   DAP_FIELD(pathFormat, "pathFormat"),
   DAP_FIELD(supportsArgsCanBeInterpretedByShell,
      "supportsArgsCanBeInterpretedByShell"),
   DAP_FIELD(supportsInvalidatedEvent, "supportsInvalidatedEvent"),
   DAP_FIELD(supportsMemoryEvent, "supportsMemoryEvent"),
   DAP_FIELD(supportsMemoryReferences, "supportsMemoryReferences"),
   DAP_FIELD(supportsProgressReporting, "supportsProgressReporting"),
   DAP_FIELD(supportsRunInTerminalRequest, "supportsRunInTerminalRequest"),
   DAP_FIELD(supportsStartDebuggingRequest, "supportsStartDebuggingRequest"),
   DAP_FIELD(supportsVariablePaging, "supportsVariablePaging"),
   DAP_FIELD(supportsVariableType, "supportsVariableType"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(ThreadsRequest, "threads");

DAP_IMPLEMENT_STRUCT_TYPEINFO(StackTraceRequest,
   "stackTrace",
   DAP_FIELD(format, "format"),
   DAP_FIELD(levels, "levels"),
   DAP_FIELD(startFrame, "startFrame"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(ScopesRequest,
   "scopes",
   DAP_FIELD(frameId, "frameId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(VariablesRequest,
   "variables",
   DAP_FIELD(count, "count"),
   DAP_FIELD(filter, "filter"),
   DAP_FIELD(format, "format"),
   DAP_FIELD(start, "start"),
   DAP_FIELD(variablesReference,
      "variablesReference"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(PauseRequest,
   "pause",
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(ContinueRequest,
   "continue",
   DAP_FIELD(singleThread, "singleThread"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(NextRequest,
   "next",
   DAP_FIELD(granularity, "granularity"),
   DAP_FIELD(singleThread, "singleThread"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(StepBackRequest,
   "stepBack",
   DAP_FIELD(granularity, "granularity"),
   DAP_FIELD(singleThread, "singleThread"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(StepInRequest,
   "stepIn",
   DAP_FIELD(granularity, "granularity"),
   DAP_FIELD(singleThread, "singleThread"),
   DAP_FIELD(targetId, "targetId"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(StepOutRequest,
   "stepOut",
   DAP_FIELD(granularity, "granularity"),
   DAP_FIELD(singleThread, "singleThread"),
   DAP_FIELD(threadId, "threadId"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(SetBreakpointsRequest,
   "setBreakpoints",
   DAP_FIELD(breakpoints, "breakpoints"),
   DAP_FIELD(lines, "lines"),
   DAP_FIELD(source, "source"),
   DAP_FIELD(sourceModified, "sourceModified"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(SetExceptionBreakpointsRequest,
   "setExceptionBreakpoints",
   DAP_FIELD(exceptionOptions, "exceptionOptions"),
   DAP_FIELD(filterOptions, "filterOptions"),
   DAP_FIELD(filters, "filters"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(SourceRequest,
   "source",
   DAP_FIELD(source, "source"),
   DAP_FIELD(sourceReference, "sourceReference"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(LaunchRequest,
   "launch",
   DAP_FIELD(restart, "__restart"),
   DAP_FIELD(noDebug, "noDebug"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(DisconnectRequest,
   "disconnect",
   DAP_FIELD(restart, "restart"),
   DAP_FIELD(suspendDebuggee, "suspendDebuggee"),
   DAP_FIELD(terminateDebuggee,
      "terminateDebuggee"));

DAP_IMPLEMENT_STRUCT_TYPEINFO(ConfigurationDoneRequest, "configurationDone");

}  // namespace dap
